package rules

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Rule) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ID":
			z.ID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ScriptID":
			z.ScriptID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "HookEndpoint":
			z.HookEndpoint, err = dc.ReadString()
			if err != nil {
				return
			}
		case "HookRetry":
			z.HookRetry, err = dc.ReadInt()
			if err != nil {
				return
			}
		case "EventTypes":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.EventTypes) >= int(zb0002) {
				z.EventTypes = (z.EventTypes)[:zb0002]
			} else {
				z.EventTypes = make([]string, zb0002)
			}
			for za0001 := range z.EventTypes {
				z.EventTypes[za0001], err = dc.ReadString()
				if err != nil {
					return
				}
			}
		case "Dwell":
			z.Dwell, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "DwellDeadline":
			z.DwellDeadline, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "MaxDwell":
			z.MaxDwell, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Rule) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "Title"
	err = en.Append(0x89, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		return
	}
	// write "ID"
	err = en.Append(0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		return
	}
	// write "ScriptID"
	err = en.Append(0xa8, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ScriptID)
	if err != nil {
		return
	}
	// write "HookEndpoint"
	err = en.Append(0xac, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.HookEndpoint)
	if err != nil {
		return
	}
	// write "HookRetry"
	err = en.Append(0xa9, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteInt(z.HookRetry)
	if err != nil {
		return
	}
	// write "EventTypes"
	err = en.Append(0xaa, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.EventTypes)))
	if err != nil {
		return
	}
	for za0001 := range z.EventTypes {
		err = en.WriteString(z.EventTypes[za0001])
		if err != nil {
			return
		}
	}
	// write "Dwell"
	err = en.Append(0xa5, 0x44, 0x77, 0x65, 0x6c, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Dwell)
	if err != nil {
		return
	}
	// write "DwellDeadline"
	err = en.Append(0xad, 0x44, 0x77, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.DwellDeadline)
	if err != nil {
		return
	}
	// write "MaxDwell"
	err = en.Append(0xa8, 0x4d, 0x61, 0x78, 0x44, 0x77, 0x65, 0x6c, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.MaxDwell)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Rule) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Title"
	o = append(o, 0x89, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "ID"
	o = append(o, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "ScriptID"
	o = append(o, 0xa8, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44)
	o = msgp.AppendString(o, z.ScriptID)
	// string "HookEndpoint"
	o = append(o, 0xac, 0x48, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74)
	o = msgp.AppendString(o, z.HookEndpoint)
	// string "HookRetry"
	o = append(o, 0xa9, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x79)
	o = msgp.AppendInt(o, z.HookRetry)
	// string "EventTypes"
	o = append(o, 0xaa, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.EventTypes)))
	for za0001 := range z.EventTypes {
		o = msgp.AppendString(o, z.EventTypes[za0001])
	}
	// string "Dwell"
	o = append(o, 0xa5, 0x44, 0x77, 0x65, 0x6c, 0x6c)
	o = msgp.AppendUint64(o, z.Dwell)
	// string "DwellDeadline"
	o = append(o, 0xad, 0x44, 0x77, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendUint64(o, z.DwellDeadline)
	// string "MaxDwell"
	o = append(o, 0xa8, 0x4d, 0x61, 0x78, 0x44, 0x77, 0x65, 0x6c, 0x6c)
	o = msgp.AppendUint64(o, z.MaxDwell)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Rule) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "ScriptID":
			z.ScriptID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "HookEndpoint":
			z.HookEndpoint, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "HookRetry":
			z.HookRetry, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				return
			}
		case "EventTypes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.EventTypes) >= int(zb0002) {
				z.EventTypes = (z.EventTypes)[:zb0002]
			} else {
				z.EventTypes = make([]string, zb0002)
			}
			for za0001 := range z.EventTypes {
				z.EventTypes[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					return
				}
			}
		case "Dwell":
			z.Dwell, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "DwellDeadline":
			z.DwellDeadline, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		case "MaxDwell":
			z.MaxDwell, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Rule) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Title) + 3 + msgp.StringPrefixSize + len(z.ID) + 9 + msgp.StringPrefixSize + len(z.ScriptID) + 13 + msgp.StringPrefixSize + len(z.HookEndpoint) + 10 + msgp.IntSize + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.EventTypes {
		s += msgp.StringPrefixSize + len(z.EventTypes[za0001])
	}
	s += 6 + msgp.Uint64Size + 14 + msgp.Uint64Size + 9 + msgp.Uint64Size
	return
}
