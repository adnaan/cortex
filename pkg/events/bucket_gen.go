package events

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Bucket) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Rule":
			err = z.Rule.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "Events":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Events) >= int(zb0002) {
				z.Events = (z.Events)[:zb0002]
			} else {
				z.Events = make([]*Event, zb0002)
			}
			for za0001 := range z.Events {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}
					z.Events[za0001] = nil
				} else {
					if z.Events[za0001] == nil {
						z.Events[za0001] = new(Event)
					}
					err = z.Events[za0001].DecodeMsg(dc)
					if err != nil {
						return
					}
				}
			}
		case "UpdatedAt":
			z.UpdatedAt, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "CreatedAt":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Bucket) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Rule"
	err = en.Append(0x84, 0xa4, 0x52, 0x75, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = z.Rule.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "Events"
	err = en.Append(0xa6, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Events)))
	if err != nil {
		return
	}
	for za0001 := range z.Events {
		if z.Events[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Events[za0001].EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	// write "UpdatedAt"
	err = en.Append(0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.UpdatedAt)
	if err != nil {
		return
	}
	// write "CreatedAt"
	err = en.Append(0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Bucket) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Rule"
	o = append(o, 0x84, 0xa4, 0x52, 0x75, 0x6c, 0x65)
	o, err = z.Rule.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "Events"
	o = append(o, 0xa6, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Events)))
	for za0001 := range z.Events {
		if z.Events[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Events[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "UpdatedAt"
	o = append(o, 0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.UpdatedAt)
	// string "CreatedAt"
	o = append(o, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.CreatedAt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Bucket) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Rule":
			bts, err = z.Rule.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "Events":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Events) >= int(zb0002) {
				z.Events = (z.Events)[:zb0002]
			} else {
				z.Events = make([]*Event, zb0002)
			}
			for za0001 := range z.Events {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Events[za0001] = nil
				} else {
					if z.Events[za0001] == nil {
						z.Events[za0001] = new(Event)
					}
					bts, err = z.Events[za0001].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "UpdatedAt":
			z.UpdatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				return
			}
		case "CreatedAt":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Bucket) Msgsize() (s int) {
	s = 1 + 5 + z.Rule.Msgsize() + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Events {
		if z.Events[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Events[za0001].Msgsize()
		}
	}
	s += 10 + msgp.TimeSize + 10 + msgp.TimeSize
	return
}
