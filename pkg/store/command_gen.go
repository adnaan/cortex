package store

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/myntra/cortex/pkg/events"
	"github.com/myntra/cortex/pkg/executions"
	"github.com/myntra/cortex/pkg/js"
	"github.com/myntra/cortex/pkg/rules"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Command) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Op":
			z.Op, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Rule":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Rule = nil
			} else {
				if z.Rule == nil {
					z.Rule = new(rules.Rule)
				}
				err = z.Rule.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "RuleID":
			z.RuleID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Event":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Event = nil
			} else {
				if z.Event == nil {
					z.Event = new(events.Event)
				}
				err = z.Event.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "ScriptID":
			z.ScriptID, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Script":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Script = nil
			} else {
				if z.Script == nil {
					z.Script = new(js.Script)
				}
				err = z.Script.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Record":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Record = nil
			} else {
				if z.Record == nil {
					z.Record = new(executions.Record)
				}
				err = z.Record.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "RecordID":
			z.RecordID, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Command) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "Op"
	err = en.Append(0x88, 0xa2, 0x4f, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Op)
	if err != nil {
		return
	}
	// write "Rule"
	err = en.Append(0xa4, 0x52, 0x75, 0x6c, 0x65)
	if err != nil {
		return
	}
	if z.Rule == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Rule.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "RuleID"
	err = en.Append(0xa6, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.RuleID)
	if err != nil {
		return
	}
	// write "Event"
	err = en.Append(0xa5, 0x45, 0x76, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	if z.Event == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Event.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "ScriptID"
	err = en.Append(0xa8, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ScriptID)
	if err != nil {
		return
	}
	// write "Script"
	err = en.Append(0xa6, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74)
	if err != nil {
		return
	}
	if z.Script == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Script.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "Record"
	err = en.Append(0xa6, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	if z.Record == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Record.EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "RecordID"
	err = en.Append(0xa8, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.RecordID)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Command) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "Op"
	o = append(o, 0x88, 0xa2, 0x4f, 0x70)
	o = msgp.AppendString(o, z.Op)
	// string "Rule"
	o = append(o, 0xa4, 0x52, 0x75, 0x6c, 0x65)
	if z.Rule == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Rule.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "RuleID"
	o = append(o, 0xa6, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x44)
	o = msgp.AppendString(o, z.RuleID)
	// string "Event"
	o = append(o, 0xa5, 0x45, 0x76, 0x65, 0x6e, 0x74)
	if z.Event == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Event.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "ScriptID"
	o = append(o, 0xa8, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x44)
	o = msgp.AppendString(o, z.ScriptID)
	// string "Script"
	o = append(o, 0xa6, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74)
	if z.Script == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Script.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Record"
	o = append(o, 0xa6, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64)
	if z.Record == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Record.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "RecordID"
	o = append(o, 0xa8, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x44)
	o = msgp.AppendString(o, z.RecordID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Command) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Op":
			z.Op, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Rule":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Rule = nil
			} else {
				if z.Rule == nil {
					z.Rule = new(rules.Rule)
				}
				bts, err = z.Rule.UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "RuleID":
			z.RuleID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Event":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Event = nil
			} else {
				if z.Event == nil {
					z.Event = new(events.Event)
				}
				bts, err = z.Event.UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "ScriptID":
			z.ScriptID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Script":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Script = nil
			} else {
				if z.Script == nil {
					z.Script = new(js.Script)
				}
				bts, err = z.Script.UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "Record":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Record = nil
			} else {
				if z.Record == nil {
					z.Record = new(executions.Record)
				}
				bts, err = z.Record.UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "RecordID":
			z.RecordID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Command) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Op) + 5
	if z.Rule == nil {
		s += msgp.NilSize
	} else {
		s += z.Rule.Msgsize()
	}
	s += 7 + msgp.StringPrefixSize + len(z.RuleID) + 6
	if z.Event == nil {
		s += msgp.NilSize
	} else {
		s += z.Event.Msgsize()
	}
	s += 9 + msgp.StringPrefixSize + len(z.ScriptID) + 7
	if z.Script == nil {
		s += msgp.NilSize
	} else {
		s += z.Script.Msgsize()
	}
	s += 7
	if z.Record == nil {
		s += msgp.NilSize
	} else {
		s += z.Record.Msgsize()
	}
	s += 9 + msgp.StringPrefixSize + len(z.RecordID)
	return
}
