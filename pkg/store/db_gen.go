package store

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/myntra/cortex/pkg/events"
	"github.com/myntra/cortex/pkg/executions"
	"github.com/myntra/cortex/pkg/rules"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DB) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Buckets":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Buckets == nil && zb0002 > 0 {
				z.Buckets = make(map[string]*events.Bucket, zb0002)
			} else if len(z.Buckets) > 0 {
				for key := range z.Buckets {
					delete(z.Buckets, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 *events.Bucket
				za0001, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(events.Bucket)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.Buckets[za0001] = za0002
			}
		case "Rules":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Rules == nil && zb0003 > 0 {
				z.Rules = make(map[string]*rules.Rule, zb0003)
			} else if len(z.Rules) > 0 {
				for key := range z.Rules {
					delete(z.Rules, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 *rules.Rule
				za0003, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}
					za0004 = nil
				} else {
					if za0004 == nil {
						za0004 = new(rules.Rule)
					}
					err = za0004.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.Rules[za0003] = za0004
			}
		case "History":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.History == nil && zb0004 > 0 {
				z.History = make(map[string]*executions.Record, zb0004)
			} else if len(z.History) > 0 {
				for key := range z.History {
					delete(z.History, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0005 string
				var za0006 *executions.Record
				za0005, err = dc.ReadString()
				if err != nil {
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}
					za0006 = nil
				} else {
					if za0006 == nil {
						za0006 = new(executions.Record)
					}
					err = za0006.DecodeMsg(dc)
					if err != nil {
						return
					}
				}
				z.History[za0005] = za0006
			}
		case "Scripts":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			if z.Scripts == nil && zb0005 > 0 {
				z.Scripts = make(map[string][]byte, zb0005)
			} else if len(z.Scripts) > 0 {
				for key := range z.Scripts {
					delete(z.Scripts, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0007 string
				var za0008 []byte
				za0007, err = dc.ReadString()
				if err != nil {
					return
				}
				za0008, err = dc.ReadBytes(za0008)
				if err != nil {
					return
				}
				z.Scripts[za0007] = za0008
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DB) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Buckets"
	err = en.Append(0x84, 0xa7, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Buckets)))
	if err != nil {
		return
	}
	for za0001, za0002 := range z.Buckets {
		err = en.WriteString(za0001)
		if err != nil {
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	// write "Rules"
	err = en.Append(0xa5, 0x52, 0x75, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Rules)))
	if err != nil {
		return
	}
	for za0003, za0004 := range z.Rules {
		err = en.WriteString(za0003)
		if err != nil {
			return
		}
		if za0004 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0004.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	// write "History"
	err = en.Append(0xa7, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.History)))
	if err != nil {
		return
	}
	for za0005, za0006 := range z.History {
		err = en.WriteString(za0005)
		if err != nil {
			return
		}
		if za0006 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0006.EncodeMsg(en)
			if err != nil {
				return
			}
		}
	}
	// write "Scripts"
	err = en.Append(0xa7, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Scripts)))
	if err != nil {
		return
	}
	for za0007, za0008 := range z.Scripts {
		err = en.WriteString(za0007)
		if err != nil {
			return
		}
		err = en.WriteBytes(za0008)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DB) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Buckets"
	o = append(o, 0x84, 0xa7, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Buckets)))
	for za0001, za0002 := range z.Buckets {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "Rules"
	o = append(o, 0xa5, 0x52, 0x75, 0x6c, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Rules)))
	for za0003, za0004 := range z.Rules {
		o = msgp.AppendString(o, za0003)
		if za0004 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0004.MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "History"
	o = append(o, 0xa7, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79)
	o = msgp.AppendMapHeader(o, uint32(len(z.History)))
	for za0005, za0006 := range z.History {
		o = msgp.AppendString(o, za0005)
		if za0006 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0006.MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "Scripts"
	o = append(o, 0xa7, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Scripts)))
	for za0007, za0008 := range z.Scripts {
		o = msgp.AppendString(o, za0007)
		o = msgp.AppendBytes(o, za0008)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DB) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Buckets":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				return
			}
			if z.Buckets == nil && zb0002 > 0 {
				z.Buckets = make(map[string]*events.Bucket, zb0002)
			} else if len(z.Buckets) > 0 {
				for key := range z.Buckets {
					delete(z.Buckets, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *events.Bucket
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(events.Bucket)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
				z.Buckets[za0001] = za0002
			}
		case "Rules":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				return
			}
			if z.Rules == nil && zb0003 > 0 {
				z.Rules = make(map[string]*rules.Rule, zb0003)
			} else if len(z.Rules) > 0 {
				for key := range z.Rules {
					delete(z.Rules, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 *rules.Rule
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0004 = nil
				} else {
					if za0004 == nil {
						za0004 = new(rules.Rule)
					}
					bts, err = za0004.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
				z.Rules[za0003] = za0004
			}
		case "History":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				return
			}
			if z.History == nil && zb0004 > 0 {
				z.History = make(map[string]*executions.Record, zb0004)
			} else if len(z.History) > 0 {
				for key := range z.History {
					delete(z.History, key)
				}
			}
			for zb0004 > 0 {
				var za0005 string
				var za0006 *executions.Record
				zb0004--
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0006 = nil
				} else {
					if za0006 == nil {
						za0006 = new(executions.Record)
					}
					bts, err = za0006.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
				z.History[za0005] = za0006
			}
		case "Scripts":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				return
			}
			if z.Scripts == nil && zb0005 > 0 {
				z.Scripts = make(map[string][]byte, zb0005)
			} else if len(z.Scripts) > 0 {
				for key := range z.Scripts {
					delete(z.Scripts, key)
				}
			}
			for zb0005 > 0 {
				var za0007 string
				var za0008 []byte
				zb0005--
				za0007, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					return
				}
				za0008, bts, err = msgp.ReadBytesBytes(bts, za0008)
				if err != nil {
					return
				}
				z.Scripts[za0007] = za0008
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DB) Msgsize() (s int) {
	s = 1 + 8 + msgp.MapHeaderSize
	if z.Buckets != nil {
		for za0001, za0002 := range z.Buckets {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += 6 + msgp.MapHeaderSize
	if z.Rules != nil {
		for za0003, za0004 := range z.Rules {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003)
			if za0004 == nil {
				s += msgp.NilSize
			} else {
				s += za0004.Msgsize()
			}
		}
	}
	s += 8 + msgp.MapHeaderSize
	if z.History != nil {
		for za0005, za0006 := range z.History {
			_ = za0006
			s += msgp.StringPrefixSize + len(za0005)
			if za0006 == nil {
				s += msgp.NilSize
			} else {
				s += za0006.Msgsize()
			}
		}
	}
	s += 8 + msgp.MapHeaderSize
	if z.Scripts != nil {
		for za0007, za0008 := range z.Scripts {
			_ = za0008
			s += msgp.StringPrefixSize + len(za0007) + msgp.BytesPrefixSize + len(za0008)
		}
	}
	return
}
